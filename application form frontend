
.container{
    background-color: #aee9f8;
 border-radius:8px ;
 padding:15px 5px 10px;
}
.card{
    background-color: #eff7fc;

}
h2 {
    /* color: #10f367; */
    text-align: center;
    font-weight: 700;
    text-shadow: 1px 1px 2px #aaa;
  }
  
  label {
    color: #6c757d;
    font-weight: 600;
  }
  
  .text-danger {
    font-size: 0.85rem;
  }
  
  .btn-primary {
    background-color: #010203;
    border: none;
  }
  
  .btn-primary:hover {
    background-color: #0b5ed7;
  }
  -------------------------------------------------------------------
<div class="container mt-5">
    <h2 class="mb-4 text-center fw-bold" style="text-shadow: 1px 1px 2px #aaa;">
      Job Application Form
    </h2>
  
    <form [formGroup]="applicationForm" (ngSubmit)="onSubmit()" class="card p-4 shadow-sm">
  
      <div class="row">
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">Candidate ID</label>
          <input formControlName="candidateId" class="form-control" type="number" placeholder="Enter Candidate ID" />
          <div *ngIf="(submitted || applicationForm.get('candidateId')?.touched) && applicationForm.get('candidateId')?.hasError('required')" class="text-danger small">
            Candidate ID is required.
          </div>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">Job ID</label>
          <input formControlName="jobId" class="form-control" type="number" placeholder="Enter Job ID" />
          <div *ngIf="(submitted || applicationForm.get('jobId')?.touched) && applicationForm.get('jobId')?.hasError('required')" class="text-danger small">
            Job ID is required.
          </div>
        </div>
      </div>
  
      <div class="row">
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">First Name</label>
          <input formControlName="firstName" class="form-control" placeholder="Enter First Name" />
          <div *ngIf="(submitted || applicationForm.get('firstName')?.touched) && applicationForm.get('firstName')?.hasError('required')" class="text-danger small">
            First name is required.
          </div>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">Last Name</label>
          <input formControlName="lastName" class="form-control" placeholder="Enter Last Name" />
          <div *ngIf="(submitted || applicationForm.get('lastName')?.touched) && applicationForm.get('lastName')?.hasError('required')" class="text-danger small">
            Last name is required.
          </div>
        </div>
      </div>
  
      <div class="row">
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">Email</label>
          <input formControlName="email" class="form-control" type="email" placeholder="example@mail.com" />
          <div *ngIf="(submitted || applicationForm.get('email')?.touched)" class="text-danger small">
            <div *ngIf="applicationForm.get('email')?.hasError('required')">Email is required.</div>
            <div *ngIf="applicationForm.get('email')?.hasError('email')">Enter a valid email.</div>
          </div>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">Date of Birth</label>
          <input formControlName="dateOfBirth" class="form-control" type="date" />
        </div>
      </div>
  
      <div class="row">
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">Phone Number</label>
          <input formControlName="phoneNumber" class="form-control" placeholder="+1234567890" />
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">Address</label>
          <input formControlName="address" class="form-control" placeholder="Enter your address" />
        </div>
      </div>
  
      <div class="mb-3">
        <label class="form-label text-secondary fw-semibold">College Name</label>
        <input formControlName="collegeName" class="form-control" placeholder="Enter College Name" />
      </div>
  
      <div class="row">
        <div class="col-md-4 mb-3">
          <label class="form-label text-secondary fw-semibold">10th %</label>
          <input formControlName="tenthPercentage" class="form-control" type="number" step="0.01" placeholder="e.g. 85.50" />
          <div *ngIf="(submitted || applicationForm.get('tenthPercentage')?.touched) && applicationForm.get('tenthPercentage')?.hasError('required')" class="text-danger small">
            10th Percentage is required.
          </div>
        </div>
        <div class="col-md-4 mb-3">
          <label class="form-label text-secondary fw-semibold">12th %</label>
          <input formControlName="twelfthPercentage" class="form-control" type="number" step="0.01" placeholder="e.g. 88.00" />
          <div *ngIf="(submitted || applicationForm.get('twelfthPercentage')?.touched) && applicationForm.get('twelfthPercentage')?.hasError('required')" class="text-danger small">
            12th Percentage is required.
          </div>
        </div>
        <div class="col-md-4 mb-3">
          <label class="form-label text-secondary fw-semibold">Graduation CGPA</label>
          <input formControlName="graduationCgpa" class="form-control" type="number" step="0.01" placeholder="e.g. 8.75" />
          <div *ngIf="(submitted || applicationForm.get('twelfthPercentage')?.touched) && applicationForm.get('twelfthPercentage')?.hasError('required')" class="text-danger small">
            Graduate Percentage is required.
          </div>
        </div>
      </div>
  
      <div class="row">
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">Post Graduation CGPA</label>
          <input formControlName="postGraduationCgpa" class="form-control" type="number" step="0.01" placeholder="e.g. 9.10" />
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">Passed Out Year</label>
          <input formControlName="passedOutYear" class="form-control" type="number" placeholder="e.g. 2023" />
          <div *ngIf="(submitted || applicationForm.get('passedOutYear')?.touched) && applicationForm.get('passedOutYear')?.hasError('required')" class="text-danger small">
            Passed out year is required.
          </div>
        </div>
      </div>
  
      <div class="mb-3">
        <label class="form-label text-secondary fw-semibold">Backlog History</label>
        <textarea formControlName="backlogHistory" class="form-control" placeholder="Mention any backlogs if any or type NA"></textarea>
        <div *ngIf="(submitted || applicationForm.get('backlogHistory')?.touched) && applicationForm.get('backlogHistory')?.hasError('required')" class="text-danger small">
            Backlog History is required.
          </div>
      </div>
  
      <div class="mb-3">
        <label class="form-label text-secondary fw-semibold">Skills</label>
        <textarea formControlName="skills" class="form-control" placeholder="List your skills separated by commas"></textarea>
      </div>
  
      <div class="mb-3">
        <label class="form-label text-secondary fw-semibold">Projects</label>
        <textarea formControlName="projects" class="form-control" placeholder="Briefly describe your projects"></textarea>
      </div>
  
      <div class="row">
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">Course</label>
          <input formControlName="course" class="form-control" placeholder="Your course (e.g. B.Tech)" />
          <div *ngIf="(submitted || applicationForm.get('course')?.touched) && applicationForm.get('course')?.hasError('required')" class="text-danger small">
            Course is required.
          </div>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">Specialization</label>
          <input formControlName="specialization" class="form-control" placeholder="Your specialization (e.g. Computer Science)" />
          <div *ngIf="(submitted || applicationForm.get('specialization')?.touched) && applicationForm.get('specialization')?.hasError('required')" class="text-danger small">
            Specialization is required.
          </div>
        </div>
      </div>
  
      <div class="row">
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">Upload Resume (PDF)</label>
          <input type="file" class="form-control" (change)="onFileChange($event, 'resume')" accept=".pdf" />
          <div *ngIf="submitted && !resumeFile" class="text-danger small">
            Resume is required.
          </div>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label text-secondary fw-semibold">Upload Cover Letter (PDF)</label>
          <input type="file" class="form-control" (change)="onFileChange($event, 'coverLetter')" accept=".pdf" />
          <div *ngIf="submitted && !coverLetterFile" class="text-danger small">
            Cover Letter is required.
          </div>
        </div>
      </div>
      
  
      <div class="d-flex justify-content-center">
        <button class="btn btn-primary px-5 mt-3" type="submit" [disabled]="applicationForm.invalid">
          Submit
        </button>
      </div>
  
      <div *ngIf="responseMessage" class="alert alert-success mt-3 text-center">{{ responseMessage }}</div>
      <div *ngIf="errorMessage" class="alert alert-danger mt-3 text-center">{{ errorMessage }}</div>
  
    </form>
  </div>
  ----------------------------------------------------------------------------------
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-application-form',
  templateUrl: './application-form.component.html',
  styleUrls: ['./application-form.component.css']
})
export class ApplicationFormComponent implements OnInit {
  applicationForm: FormGroup;
  submitted = false;
  responseMessage = '';
  errorMessage = '';

  constructor(private fb: FormBuilder) {
    this.applicationForm = this.fb.group({
      candidateId: ['', Validators.required],
      jobId: ['', Validators.required],
      firstName: ['', Validators.required],
      lastName: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      dateOfBirth: ['',Validators.required],
      phoneNumber: ['',Validators.required],
      address: ['',Validators.required],
      collegeName: ['',Validators.required],
      tenthPercentage: ['',Validators.required],
      twelfthPercentage: ['',Validators.required],
      graduationCgpa: ['',Validators.required],
      postGraduationCgpa: [''],
      passedOutYear: ['',Validators.required],
      backlogHistory: ['',Validators.required],
      skills: [''],
      projects: [''],
      course: [''],
      specialization: [''],
      resumeUrl: ['',Validators.required],
      coverLetterUrl: ['',Validators.required]
    });
  }

  ngOnInit(): void {}

  resumeFile: File | null = null;
coverLetterFile: File | null = null;

onFileChange(event: Event, type: 'resume' | 'coverLetter') {
  const input = event.target as HTMLInputElement;
  if (input.files && input.files.length > 0) {
    if (type === 'resume') {
      this.resumeFile = input.files[0];
    } else {
      this.coverLetterFile = input.files[0];
    }
  }
}

onSubmit() {
  this.submitted = true;

  if (this.applicationForm.invalid || !this.resumeFile || !this.coverLetterFile) {
    this.errorMessage = 'Please fill in all required fields and upload both documents.';
    this.responseMessage = '';
    this.applicationForm.markAllAsTouched();
    return;
  }

  // Handle form + file submission (e.g. via FormData)
  const formData = new FormData();
  formData.append('resume', this.resumeFile);
  formData.append('coverLetter', this.coverLetterFile);

  Object.keys(this.applicationForm.controls).forEach(key => {
    formData.append(key, this.applicationForm.get(key)?.value);
  });

  // Simulate or call your service
  console.log('Submitting form data:', formData);

  this.responseMessage = 'Application submitted successfully!';
  this.errorMessage = '';
  this.applicationForm.reset();
  this.resumeFile = null;
  this.coverLetterFile = null;
  this.submitted = false;
}
}
----------------------------------------------
service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ApplicationService {
  private apiUrl = '/api/applications/submit';

  constructor(private http: HttpClient) {}

  submitApplication(applicationData: any): Observable<string> {
    return this.http.post(this.apiUrl, applicationData, { responseType: 'text' });
  }
}
