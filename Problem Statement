1.	 PROJECT DESCRIPTION 
The HR Recruitment Pipeline Manager is a web-based application designed to streamline and optimize the recruitment process for HR professionals. The system will help track candidates through various stages of recruitment, from initial application to final placement, while providing analytics and insights to improve hiring efficiency.

2.	 USER STORIES
US 01	Priority: Must Have
User Story Description
As an HR recruiter, I want to create and post new job openings in the system so that potential candidates can apply.
Acceptance Criteria 
•	Ability to enter detailed job description, requirements, and responsibilities
•	Option to specify job location, department, and employment type
•	Automatic generation of a unique job posting ID
•	Job posting can be marked as active or inactive

US 02	Priority: Must Have
User Story Description
As a candidate, I want to submit my application through the system so that I can be considered for a job opening.
Acceptance Criteria 

•	Ability to upload resume and cover letter
•	Option to fill out a comprehensive application form
•	Automatic acknowledgment email sent to the candidate
•	Application status tracked in the system

US 03	Priority: Must Have
User Story Description
As an HR manager, I want to view and manage candidate applications in a centralized dashboard.
Acceptance Criteria 
•	Ability to filter and search candidates by various criteria
•	View detailed candidate profiles and application documents
•	Move candidates between different recruitment stages
•	Add internal notes and comments to candidate profiles

US 04	Priority: Must Have
User Story Description
As an HR recruiter, I want to schedule interviews and send automated invitations to candidates and interviewers.
Acceptance Criteria 
•	Integration with calendar systems
•	Ability to create interview slots and assign interviewers
•	Automatic email notifications to candidates and interviewers
•	Option to send interview preparation materials

US 05	Priority: Must Have
User Story Description
As a hiring manager, I want to provide interview feedback and ratings for candidates.
Acceptance Criteria 
•	Standardized feedback form with rating scales
•	Ability to add detailed comments
•	Automatic notification to HR after feedback submission
•	Aggregate candidate scores visible to HR team

US 06	Priority: Must Have
User Story Description
As an HR professional, I want to implement role-based access control to protect sensitive candidate information.
Acceptance Criteria 
•	Different access levels for HR recruiters, managers, and executives
•	Audit log of all system access and modifications
•	Ability to restrict access to specific candidate information
•	Secure login with multi-factor authentication

US 07	Priority: Must Have
User Story Description
As an HR recruiter, I want to track the status of each candidate in the recruitment pipeline.
Acceptance Criteria 
•	Visual representation of candidate progression
•	Ability to move candidates between stages manually
•	Automatic stage transitions based on predefined rules
•	Notifications for stage changes

US 08	Priority: Should Have
User Story Description
As a system administrator, I want to customize email templates for different recruitment stages.
Acceptance Criteria 
•	Ability to create and edit email templates
•	Personalization options for candidate names and job details
•	Preview functionality for email templates
•	Separate templates for different communication types

US 09	Priority: Must Have
User Story Description
As a candidate, I want to receive timely updates about my application status.
Acceptance Criteria 
•	Automatic email notifications for application milestones
•	Ability to check application status through a portal
•	Clear communication about next steps
•	Option to withdraw application

US 10	Priority: Should Have
User Story Description
As a hiring manager, I want to create and manage interview panels.
Acceptance Criteria 
•	Ability to assign interviewers to candidate interviews
•	Scheduling conflict detection
•	Panel feedback consolidation
•	Interviewer performance tracking

US 11	Priority: Must Have
User Story Description
As an HR professional, I want to ensure compliance with data protection regulations.
Acceptance Criteria 
•	Automated data retention and deletion policies
•	Candidate consent management
•	GDPR and other regional compliance features
•	Secure data encryption


US 12	Priority: Should Have
User Story Description
As a candidate, I want to receive constructive feedback after interviews.
Acceptance Criteria 
•	Optional feedback feature for rejected candidates
•	Standardized feedback format
•	Confidential and professional communication
•	Insights for candidate self-improvement

US 13	Priority: Must Have
User Story Description
As an HR recruiter, I want to manage candidate onboarding documentation.
Acceptance Criteria 
•	Digital document collection and storage
•	E-signature capabilities
•	Automated document request and tracking
•	Compliance document management

US 14	Priority: Should Have
User Story Description
As a system administrator, I want to generate comprehensive system usage reports.
Acceptance Criteria 
•	User activity tracking
•	System performance metrics
•	Security and access reports
•	Exportable and schedulable reports

US 15	Priority: Should Have
User Story Description
As an HR manager, I want to create talent pools for future recruitment.
Acceptance Criteria 
•	Ability to tag and categorize potential candidates
•	Notes and profile management for passive candidates
•	Automated re-engagement workflows
•	Integration with LinkedIn and professional networks

3.	FRONTEND COMPONENTS
Job Posting Management
Features:
	Create detailed job listings
	Generate unique job posting IDs
	Active/inactive job status control

 

Candidate Pipeline:
Features:
	Visual pipeline with draggable stages
	Candidate cards showing progression
	Stages include Applied, Phone Screen, Interview, Offer, Hired


 

Interview Scheduling: 
Features:
	Interview scheduling form
	Dropdown for selecting interviewers
	Date and time selection
	Interview mode options (in-person, video, phone)


 
Onboarding Documentation:
Features:
	Document upload section
	Document type selection
	E-signature option
	File upload capability

Application Submission Page:
Features:
	Job Details Section such as Shows specific job information, Provides context for the application.
	Comprehensive Application Form such as Personal Information Collection, Resume Upload, Cover Letter Upload (Optional) , Clear Submit Button

 


Application Status Tracking Page 
Features:
1.	Status Tracker 
	Visual representation of application progression
	Stages: Applied → Phone Screen → Interview → Offer
	Active stage highlighted
2.	Application Details 
	Unique Application ID
	Submission Date
	Current Status
	Position Details
3.	Action Buttons 
	View Application Details
	Option to Withdraw Application

 

	HR Manager Management Dashboard: 
	Search and filter candidates
	View candidate list with basic information
	Action buttons to view profiles and move candidates between stages
	Talent Pools Section: 
	Categorization of candidates with tags
	Quick actions for creating and managing talent pools
	Sidebar for talent pool management


Administrator Management Dashboard:
Features:
	I want to customize email templates for different recruitment stages.
	I want to generate comprehensive system usage reports.
	User activity and performance tracking
	Security and access reports with schedulable and Exportable
 

4.	ENVIRONMENT REQUIREMENTS
Technology Stack:
•	Backend: Spring Boot, Spring Data, Spring REST, Spring Cloud Consul
•	Frontend: Angular/React, Typescript/JavaScript HTML5, CSS3, Bootstrap
•	Database: MySQL/NOSQL
•	Security - OAuth/Spring Security
Non-Functional Requirements:
•	Performance: The application should be fast and responsive, with quick load times and minimal lag or delay.
•	Scalability: The application should be able to handle large amounts of traffic and scale as needed to accommodate growth.
•	Security: The application should be secure and protect user data from unauthorized access, with measures such as encryption and secure authentication. Secure password storage using hashing. Protect against common web vulnerabilities (e.g., SQL injection, XSS).
•	Reliability: The application should be reliable and available, with minimal downtime or outages.
•	Usability: The application should be easy to use and intuitive, with a clear and consistent user interface.
•	Maintainability: The application should be easy to maintain and update, with clear and well-organized code that is easy to understand and modify.
•	Compatibility: The application should be compatible with a wide range of devices and browsers, with support for different screen sizes and resolutions.
•	Implement caching mechanisms to improve performance.
•	Session Management: Implement secure session management techniques to prevent unauthorized access. Consider using short-lived sessions with automatic timeouts.
•	Lazy Loading: Implement lazy loading techniques for images and other content, ensuring faster initial page loads and smoother user experience.
•	User Interface (UI) and User Experience (UX) Design: Design an intuitive user interface that is easy to navigate and provides a seamless user experience. Prioritize responsiveness and clarity across all devices (desktop, mobile, tablets).
Final Deliverables:
•	Application archive (.jar ) with source code
•	Database DDL Script
•	Complete Source code
•	Sample screenshots of important screens
Implementation Guidelines:
•	Utilize Lombok for model class creation and logging.
•	Implement logic using Lambdas and Streams.
•	Organize code into logical layers (controller, service, DTO, entity, etc).
•	Use meaningful package names reflecting the domain.
•	Employ Spring dependency injection for effective component management.
General Guidelines:
Error Handling:
•	Handle cases where the user attempts to access without authorization.
•	Implement a custom exception to throw user-defined messages.
•	Centralized exception handling mechanism should be used to capture exceptions and translate them into HTTP response.
•	Implement proper error handling mechanisms to catch any issues and log all the service exceptions using LoggingAspect
•	Handle success and error responses appropriately with proper messages. 
DTOs and Mapping:
•	Data Transfer Objects (DTOs) should be used for API request and response.
•	Entities should not be exposed directly to APIs.
•	Use ModelMapper to convert from entities to dto and vice versa.
Database Interaction:
•	Spring Data Repository should be used for database operation.
•	Add appropriate properties specific to the application like database properties and table generation strategies.
API Design:
•	All the api should be mapped with the base URI
•	Set server port number of your choice.
•	Use appropriate HTTP methods and status code for all rest end points.
•	Use Swagger for generating the API documentation.
Microservice Communication:
•	Circuit Breaker pattern should be implemented for all the critical services with a timeout of 3 seconds and error threshold of 50%. The circuit breaker should open after 10 consecutive failures and remain open for 60 seconds. Upon circuit breaker opening, a fallback mechanism should return a generic message to the client.
•	Fallback behaviors should be defined for all critical operations.
•	Create two instances for any Microservice and implement load balancing
Validation:
•	Bean validation should be used for all inputs throughout the process.
•	Custom Validators should be used for complex validation.
•	All request parameters must be validated for null or empty values. For any such invalid values, ‘Please provide a valid <attribute name>’ should be the error message.
•	Any date and time value should not start with zero.
Testing:
•	Write JUnit test cases for all service methods using Mockito.
•	80% code coverage should be achieved.
Code Quality: To ensure adherence to coding standards, the project should be analyzed using SonarQube. The following minimum acceptable values must be met:
SonarQube Metrics	Minimum Acceptable Value
Security	A
Reliability	A
Issues	<= 5
Coverage	>= 80%
Duplications	<=3%
Security Hotspots	A
Postman: Once done with implemen¬¬ting the requirements, use Postman or Swagger to test whether the REST endpoints are working fine


