<div class="container py-4">

    <h3 class="mb-4 text-center text-primary fw-bold">Interview Feedback</h3>
  
    <div class="passing-rating mb-4 d-flex flex-wrap align-items-center justify-content-center gap-3">
      <label for="jobRoleSelect" class="fw-semibold">Select Job Role:</label>
      <select id="jobRoleSelect" formControlName="selectedJobRole" class="form-select w-auto">
        <option *ngFor="let job of jobRoles" [value]="job.role">{{ job.role }}</option>
      </select>
  
      <label for="passingRatingInput" class="fw-semibold ms-3">Passing Rating Threshold:</label>
      <input
        id="passingRatingInput"
        type="number"
        formControlName="passingRating"
        min="0" max="100" step="1"
        class="form-control w-auto"
      />
  
      <button (click)="changeAllStatuses()" class="btn btn-primary ms-3 px-4 py-2 fw-semibold shadow-sm">
        Change Status for All
      </button>
    </div>
  
    <div class="candidate-feedback-list">
      <div *ngFor="let candidate of filteredCandidates" class="feedback-card mb-4 position-relative">
  
        <!-- Interview ID bar -->
        <div class="interview-id">{{ candidate.interviewId }}</div>
  
        <!-- Rating badge top-right -->
        <div class="rating-badge" *ngIf="getFeedback(candidate.id) as fb">
          {{ fb.rating }}%
        </div>
  
        <!-- Candidate & Interviewer row -->
        <div class="candidate-interviewer-row mt-3">
  
          <div>
            <div class="candidate-info">{{ candidate.name }}</div>
            <div class="job-role">{{ candidate.jobRole }}</div>
          </div>
  
          <div class="interviewer-info" *ngIf="getFeedback(candidate.id) as fb">
            Interviewer: {{ getInterviewerName(fb.interviewerId) }}
          </div>
        </div>
  
        <!-- Feedback comments -->
        <div class="feedback-details" *ngIf="getFeedback(candidate.id) as fb; else noFeedback">
          {{ fb.comments }}
        </div>
        <ng-template #noFeedback>
          <div class="no-feedback">No feedback available</div>
        </ng-template>
  
        <!-- Status -->
        <div class="status mt-3" [ngClass]="candidate.status.toLowerCase()">
          {{ candidate.status }}
        </div>
  
        <!-- Update status button -->
        <button
          (click)="updateCandidateStatus(candidate)"
          [disabled]="candidate.status === 'HIRED' || candidate.status === 'REJECTED'"
          class="btn btn-outline-primary w-100 mt-3 fw-semibold"
        >
          Update Status
        </button>
      </div>
    </div>
  </div>
  
/* Container */
.container {
    max-width: 900px;
    margin: 0 auto;
    padding: 0 15px;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: #333;
    background: #fefefe;
}

/* Interview ID bar at top of card */
.interview-id {
    background-color: #0d6efd; /* Bootstrap primary blue */
    color: white;
    font-weight: 600;
    padding: 0.45rem 1rem; /* reduced vertical padding */
    border-top-left-radius: 0.375rem;
    border-top-right-radius: 0.375rem;
    font-size: 0.9rem; /* slightly smaller */
    letter-spacing: 0.06em;
    user-select: none;
    box-shadow: 0 3px 6px rgb(13 110 253 / 0.4);
    transition: background-color 0.3s ease;
}
.interview-id:hover {
    background-color: #0b5ed7;
}

/* Card styling */
.feedback-card {
    background: #fff;
    border: 1px solid #dee2e6;
    border-radius: 0.5rem;
    box-shadow: 0 0.125rem 0.25rem rgb(0 0 0 / 0.075);
    padding: 1.25rem 1.25rem 1.75rem 1.25rem; /* reduced padding */
    position: relative;
    transition: box-shadow 0.3s ease, transform 0.3s ease;
    cursor: default;
}
.feedback-card:hover {
    box-shadow: 0 0.75rem 1.5rem rgb(0 0 0 / 0.12);
    transform: translateY(-4px);
}

/* Rating badge top-right */
.rating-badge {
    position: absolute;
    top: 12px;
    right: 14px;
    background: #198754; /* Bootstrap success green */
    color: white;
    font-weight: 700;
    font-size: 0.85rem; /* reduced font size */
    padding: 0.25rem 0.5rem; /* reduced padding */
    border-radius: 0.375rem;
    box-shadow: 0 3px 8px rgba(0,0,0,0.2);
    user-select: none;
    transition: background-color 0.3s ease;
}
.rating-badge:hover {
    background-color: #157347;
}

/* Candidate & Interviewer row */
.candidate-interviewer-row {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 0.5rem 1rem; /* slightly reduced vertical gap */
    margin-top: 0.4rem; /* reduced margin-top */
}

/* Candidate info */
.candidate-info {
    font-weight: 700;
    font-size: 1.25rem;
    color: #0d6efd;
    text-shadow: 0 0 2px rgb(13 110 253 / 0.3);
}

/* Job role */
.job-role {
    margin-top: 0.2rem;
    font-size: 1rem;
    font-weight: 600;
    color: #6c757d; /* muted gray */
}

/* Interviewer info */
.interviewer-info {
    font-size: 1rem;
    color: #495057;
    font-weight: 600;
    align-self: center;
    text-align: right;
    min-width: 140px;
}

/* Feedback comments */
.feedback-details {
    margin-top: 0.8rem; /* reduced margin */
    font-style: italic;
    color: #343a40;
    font-size: 0.95rem; /* slightly smaller */
    line-height: 1.4; /* tighter line height */
    border-left: 3px solid #0d6efd;
    padding-left: 0.8rem; /* reduced padding */
    user-select: text;
    background: #f8f9fa;
    border-radius: 0.3rem;
    box-shadow: inset 0 0 8px rgb(0 0 0 / 0.05);
    transition: background-color 0.3s ease;
}
.feedback-details:hover {
    background-color: #e9f0ff;
}

/* No feedback */
.no-feedback {
    margin-top: 0.8rem; /* reduced margin */
    font-size: 1rem;
    font-style: italic;
    color: #adb5bd;
    text-align: center;
    font-weight: 600;
}

/* Status styles */
.status {
    margin-top: 1rem; /* reduced margin */
    font-weight: 700;
    font-size: 1rem; /* reduced font size */
    text-transform: uppercase;
    letter-spacing: 1.5px;
    user-select: none;
    text-align: center;
    padding: 0.4rem 0; /* reduced padding */
    border-radius: 0.5rem;
    width: 130px; /* narrower */
    margin-left: auto;
    margin-right: auto;
    box-shadow: 0 3px 8px rgb(0 0 0 / 0.1);
    transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease;
}

.status.hired {
    color: #198754; /* green */
    background-color: #d1e7dd;
    border: 1.5px solid #198754;
}
.status.hired:hover {
    background-color: #bcd0c7;
    box-shadow: 0 5px 12px rgb(25 135 84 / 0.4);
}

.status.rejected {
    color: #dc3545; /* red */
    background-color: #f8d7da;
    border: 1.5px solid #dc3545;
}
.status.rejected:hover {
    background-color: #e4b9bf;
    box-shadow: 0 5px 12px rgb(220 53 69 / 0.4);
}

.status.pending {
    color: #ffc107; /* yellow */
    background-color: #fff3cd;
    border: 1.5px solid #ffc107;
}
.status.pending:hover {
    background-color: #ffe69c;
    box-shadow: 0 5px 12px rgb(255 193 7 / 0.4);
}

/* Update status button */
button.btn-outline-primary {
    border-width: 2px;
    font-weight: 700;
    font-size: 1rem;
    padding: 0.6rem 0;
    border-radius: 0.5rem;
    transition: background-color 0.25s ease, color 0.25s ease, box-shadow 0.25s ease;
    box-shadow: 0 3px 8px rgb(13 110 253 / 0.25);
    cursor: pointer;
    width: 100%;
    user-select: none;
}
button.btn-outline-primary:hover:not(:disabled) {
    background-color: #0d6efd;
    color: white;
    border-color: #0d6efd;
    box-shadow: 0 7px 18px rgb(13 110 253 / 0.6);
}
button.btn-outline-primary:disabled {
    cursor: not-allowed;
    opacity: 0.6;
    box-shadow: none;
}

/* Passing rating and job role selector styles */
.passing-rating label {
    font-weight: 600;
    font-size: 1rem;
    color: #212529;
    user-select: none;
}

/* Responsive tweaks */
@media (max-width: 768px) {
    .candidate-interviewer-row {
        flex-direction: column;
        gap: 0.5rem;
    }
    .interviewer-info {
        text-align: left;
        min-width: auto;
        font-size: 0.95rem;
    }
    .rating-badge {
        top: 10px;
        right: 12px;
        font-size: 0.85rem;
        padding: 0.25rem 0.5rem;
    }
}

@media (max-width: 480px) {
    .candidate-info {
        font-size: 1.1rem;
    }
    .job-role {
        font-size: 0.9rem;
    }
    button.btn-outline-primary {
        font-size: 0.9rem;
        padding: 0.55rem 0;
    }
    .status {
        width: 100%;
        font-size: 1rem;
        margin-top: 1rem;
    }
}

@media (max-width: 350px) {
    .passing-rating {
        flex-direction: column;
        gap: 1rem;
    }
    .passing-rating label,
    .passing-rating select,
    .passing-rating input[type="number"],
    .passing-rating button {
        width: 100%;
        min-width: unset;
    }
}
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

interface Candidate {
  id: string;
  name: string;
  status: string;
  interviewId: string;
  jobRole: string;
}

interface Feedback {
  candidateId: string;
  interviewerId: string;
  rating: number;
  comments: string;
}

interface Interviewer {
  id: string;
  name: string;
}

@Component({
  selector: 'app-interviewfeedback',
  templateUrl: './interviewfeedback.component.html',
  styleUrls: ['./interviewfeedback.component.css']
})
export class InterviewFeedbackComponent implements OnInit {
  feedbackForm!: FormGroup;

  jobRoles = [
    { role: 'Software Engineer', threshold: 70 },
    { role: 'Data Scientist', threshold: 75 },
    { role: 'Product Manager', threshold: 80 }
  ];

  candidates: Candidate[] = [
    { id: 'C001', name: 'Alice', status: 'PENDING', interviewId: 'INT001', jobRole: 'Software Engineer' },
    { id: 'C002', name: 'Bob', status: 'PENDING', interviewId: 'INT002', jobRole: 'Data Scientist' },
    { id: 'C003', name: 'Carla', status: 'PENDING', interviewId: 'INT003', jobRole: 'Product Manager' },
    { id: 'C004', name: 'David', status: 'PENDING', interviewId: 'INT004', jobRole: 'Software Engineer' },
    { id: 'C005', name: 'Eve', status: 'PENDING', interviewId: 'INT005', jobRole: 'Data Scientist' },
    { id: 'C006', name: 'Frank', status: 'PENDING', interviewId: 'INT006', jobRole: 'Product Manager' },
    { id: 'C007', name: 'Grace', status: 'PENDING', interviewId: 'INT007', jobRole: 'Software Engineer' },
    { id: 'C008', name: 'Henry', status: 'PENDING', interviewId: 'INT008', jobRole: 'Product Manager' },
  ];

  interviewers: Interviewer[] = [
    { id: 'INT01', name: 'John Smith' },
    { id: 'INT02', name: 'Sarah Lee' },
  ];

  feedbacks: Feedback[] = [
    { candidateId: 'C001', interviewerId: 'INT01', rating: 80, comments: 'Strong performance' },
    { candidateId: 'C002', interviewerId: 'INT01', rating: 45, comments: 'Needs improvement' },
    { candidateId: 'C003', interviewerId: 'INT02', rating: 67, comments: 'Average' },
    { candidateId: 'C004', interviewerId: 'INT01', rating: 90, comments: 'Excellent' },
    { candidateId: 'C005', interviewerId: 'INT02', rating: 38, comments: 'Weak technical skills' },
    { candidateId: 'C006', interviewerId: 'INT01', rating: 72, comments: 'Good with communication' },
    { candidateId: 'C007', interviewerId: 'INT02', rating: 51, comments: 'Barely passed' },
    { candidateId: 'C008', interviewerId: 'INT01', rating: 30, comments: 'Poor overall' },
  ];

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.feedbackForm = this.fb.group({
      passingRating: [0, [Validators.required, Validators.min(0), Validators.max(100)]],
      selectedJobRole: [this.jobRoles[0].role]
    });

    // Reset passingRating to 0 every time job role changes (manual input required)
    this.feedbackForm.get('selectedJobRole')?.valueChanges.subscribe(_ => {
      this.feedbackForm.get('passingRating')?.setValue(0, { emitEvent: false });
    });
  }

  get filteredCandidates(): Candidate[] {
    const selectedRole = this.feedbackForm.get('selectedJobRole')?.value;
    return this.candidates.filter(c => c.jobRole === selectedRole);
  }

  getFeedback(candidateId: string): Feedback | undefined {
    return this.feedbacks.find(f => f.candidateId === candidateId);
  }

  getInterviewerName(id: string): string {
    return this.interviewers.find(i => i.id === id)?.name || 'Unknown';
  }

  updateCandidateStatus(candidate: Candidate): void {
    const feedback = this.getFeedback(candidate.id);
    if (!feedback) return;

    const threshold = this.feedbackForm.get('passingRating')?.value;
    candidate.status = feedback.rating >= threshold ? 'HIRED' : 'REJECTED';
  }

  changeAllStatuses(): void {
    const threshold = this.feedbackForm.get('passingRating')?.value;
    const selectedRole = this.feedbackForm.get('selectedJobRole')?.value;

    this.candidates
      .filter(candidate => candidate.jobRole === selectedRole)
      .forEach(candidate => {
        const feedback = this.getFeedback(candidate.id);
        if (feedback) {
          candidate.status = feedback.rating >= threshold ? 'HIRED' : 'REJECTED';
        }
      });
  }
}
