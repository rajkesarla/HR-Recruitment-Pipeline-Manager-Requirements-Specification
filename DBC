recjobpost.html:
<div class="container">
  <div class="row">
    <div class="offset-1 col-10">
      <br />
      <h3 class="text-center" id="heading">Create Job Posting</h3>
      <br />

      <div class="row">
        <div class="offset-lg-3 col-lg-6 offset-md-2 col-md-8 offset-1 col-10 formBlock">
          <form [formGroup]="jobPostingForm" (ngSubmit)="onSubmit()">
            
            <!-- Job Title -->
            <div class="form-group">
              <label for="jobTitle">Job Title</label>
              <input type="text" id="jobTitle" class="form-control" formControlName="title" placeholder="Enter Job Title">
              <span class="text-danger" *ngIf="jobPostingForm.controls['title'].invalid && (jobPostingForm.controls['title'].dirty || jobPostingForm.controls['title'].touched)">
                Job title is required.
              </span>
            </div>

            <!-- Job Description -->
            <div class="form-group">
              <label for="jobDescription">Job Description</label>
              <textarea id="jobDescription" class="form-control" formControlName="description" rows="3" placeholder="Enter Job Description"></textarea>
              <span class="text-danger" *ngIf="jobPostingForm.controls['description'].invalid && (jobPostingForm.controls['description'].dirty || jobPostingForm.controls['description'].touched)">
                Job description is required.
              </span>
            </div>

            <!-- Requirements -->
            <div class="form-group">
              <label for="requirements">Requirements</label>
              <textarea id="requirements" class="form-control" formControlName="requirements" rows="3" placeholder="Enter Job Requirements"></textarea>
            </div>

            <!-- Responsibilities -->
            <div class="form-group">
              <label for="responsibilities">Responsibilities</label>
              <textarea id="responsibilities" class="form-control" formControlName="responsibilities" rows="3" placeholder="Enter the Job Responsibilites"></textarea>
            </div>

            <!-- Department -->
            <div class="form-group">
              <label for="department">Department</label>
              <select id="department" class="form-control" formControlName="department">
                <option value="">Choose department</option>
                <option value="HR">HR</option>
                <option value="Engineering">Engineering</option>
                <option value="Sales">Sales</option>
                <option value="Marketing">Marketing</option>
              </select>
              <span class="text-danger" *ngIf="jobPostingForm.controls['department'].invalid && (jobPostingForm.controls['department'].dirty || jobPostingForm.controls['department'].touched)">
                Please select a department.
              </span>
            </div>

            <!-- Job Location -->
            <div class="form-group">
              <label for="jobLocation">Job Location</label>
              <input type="text" id="jobLocation" class="form-control" formControlName="location" placeholder="Enter Job-Location">
              <span class="text-danger" *ngIf="jobPostingForm.controls['location'].invalid && (jobPostingForm.controls['location'].dirty || jobPostingForm.controls['location'].touched)">
                Job location is required.
              </span>
            </div>

            <!-- Employment Type -->
            <div class="form-group">
              <label for="employmentType">Employment Type</label>
              <select id="employmentType" class="form-control" formControlName="employment_type">
                <option value="">Select type</option>
                <option value="FULL_TIME">Full-Time</option>
                <option value="PART_TIME">Part-Time</option>
                <option value="CONTRACT">Contract</option>
                <option value="INTERN">Internship</option>
              </select>
              <span class="text-danger" *ngIf="jobPostingForm.controls['employment_type'].invalid && (jobPostingForm.controls['employment_type'].dirty || jobPostingForm.controls['employment_type'].touched)">
                Please select employment type.
              </span>
            </div>

            <!-- Job Status -->
            <div class="form-group">
              <label for="jobStatus">Job Posting Status</label>
              <select id="jobStatus" class="form-control" formControlName="status">
                <option value="">Select status</option>
                <option value="ACTIVE">Active</option>
                <option value="INACTIVE">Inactive</option>
              </select>
              <span class="text-danger" *ngIf="jobPostingForm.controls['status'].invalid && (jobPostingForm.controls['status'].dirty || jobPostingForm.controls['status'].touched)">
                Please select a status.
              </span>
            </div>

            <!-- Submit Button -->
            <div class="form-group">
              <button type="submit" class="btn btn-danger" [disabled]="jobPostingForm.invalid || jobPostingForm.pristine">Submit</button>
            </div>
          </form>

          <span *ngIf="errorMessage" class="text-danger">{{ errorMessage }}</span>
          <span *ngIf="successMessage" class="text-success">{{ successMessage }}</span>

        </div>
      </div>
    </div>
  </div>
</div>

recjobpost.css:
/* Base Container */
.container {
  padding: 20px 20px;
  
  border-radius: 12px;
 
}

/* Section Title */
h3.text-center {
  font-weight: 700;
  color: #ff4f4f; /* Softer red for modern look */
  font-size: 30px;
  margin-bottom: 20px;
  text-transform: uppercase;
}

/* Form Block */
.formBlock {
    background-color: white;
    padding: 40px 35px;
    border-radius: 15px;
    box-shadow: 10px 16px 30px rgba(0, 0, 0, 0.2); /* Soft, deeper shadow for depth */
    color: #000000;
    max-width: 550px;
    margin: 0 auto;
    width: 100%;
    transition: all 0.3s ease; /* Smooth transition on hover */
    border: 5px solid #f1f1f1; /* Smooth transition on hover */
}
#heading{
  font-size: 2rem;
  font-weight: 700;
  color: #1e3a8a; /* Indigo-800 */
  text-align: center;
  margin-bottom: 2.5rem;
}
/* Form Group Styling */
.form-group {
  margin-bottom: 25px;
}

/* Label Styling */
label {
  font-weight: 600;
  color: #444444; /* Lighter label color for a more elegant look */
  margin-bottom: 10px;
  display: block;
  font-size: 16px;
  font-family: sans-serif;
}

/* Input, Textarea, Select Styling */
input[type="text"],
textarea,
select {
  width: 100%;
  padding: 15px 18px;
  border: 2px solid #9fb7e2;
  background-color: rgb(244, 247, 248);
  border-radius: 10px;
  font-size: 16px;
  color: #333;
  box-sizing: border-box;
  transition: all 0.3s ease-in-out; /* Smooth transition on focus */
  box-shadow: 5px 8px 10px rgba(0, 0, 0, 0.2);
}

/* Focus States for Inputs */
input:focus,
textarea:focus,
select:focus {
  border-color: #ff4f4f;
  box-shadow: 0 0 8px rgba(255, 79, 79, 0.6); /* Glowing red focus */
  outline: none;
  background-color: #fff; /* Slight background change for clarity */
}

/* Button Styling */
button[type="submit"] {
  background-color: #ff4f4f;
  color: white;
  border: none;
  padding: 15px 25px;
  font-size: 16px;
  border-radius: 6px;
  transition: background-color 0.3s, transform 0.3s;
  cursor: pointer;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2); /* Deep shadow for the button */
  width: 100%;
}

button[type="submit"]:hover {
  background-color: #3eb648;
  transform: scale(1.05); /* Slight zoom effect on hover */
}

button[type="submit"]:disabled {
  
  background-color: #1953cf;
  color: white;
  cursor: not-allowed;
}

/* Validation Messages */
/* Validation Messages */
.text-danger {
  color: #ffffff; /* Dark Red */
  font-size: 14px;
  margin-top: 8px;
  display: block;
  font-weight: 600;
}

.text-success {
  color: #28a745;
  font-size: 14px;
  margin-top: 10px;
  display: block;
  font-weight: 600;
}

/* Hover Effect on Form Block */
.formBlock:hover {
  transform: scale(1.02); /* Smooth zoom effect when hovering over the form block */
}

/* Responsive Design Adjustments */
@media (max-width: 768px) {
  .formBlock {
    padding: 30px 20px;
  }

  h3.text-center {
    font-size: 26px; /* Slightly smaller text for small screens */
  }

  button[type="submit"] {
    padding: 12px 20px; /* Adjust button size on mobile */
  }
}

recjobpost.component.ts:
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { JobpostService } from './jobpost.service';  // Make sure this service exists

@Component({
  selector: 'app-recjobpost',
  templateUrl: './recjobpost.component.html',
  styleUrls: ['./recjobpost.component.css']
})
export class RecjobpostComponent implements OnInit {
  jobPostingForm!: FormGroup;
  successMessage: string = '';
  errorMessage: string = '';

  constructor(
    private fb: FormBuilder,
    private jobpostService: JobpostService // Ensure you have the service created
  ) {}

  ngOnInit(): void {
    this.jobPostingForm = this.fb.group({
      title: ['', Validators.required],
      description: ['', Validators.required],
      requirements: [''],
      responsibilities: [''],
      department: ['', Validators.required],
      location: ['', Validators.required],
      employment_type: ['', Validators.required],
      status: ['', Validators.required]
    });
  }

  onSubmit(): void {
    if (this.jobPostingForm.valid) {
      this.jobpostService.createJobPost(this.jobPostingForm.value).subscribe(
        response => {
          this.successMessage = 'Job posted successfully!';
          this.errorMessage = '';
          this.jobPostingForm.reset();
        },
        error => {
          this.errorMessage = 'Error posting job.';
          this.successMessage = '';
          console.error(error);
        }
      );
    }
  }
}

jobservice.ts:
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class JobpostService {
  constructor(private http: HttpClient) {}

  createJobPost(jobpost: any): Observable<any> {
    return this.http.post("http://localhost:8080/job/jobpost", jobpost);
  }
}
