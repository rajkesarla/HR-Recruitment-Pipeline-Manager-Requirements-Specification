<div class="container">
  <div class="row">
    <div class="offset-1 col-10">
      <br />
      <h3 class="text-center">Create Job Posting</h3>
      <br />

      <div class="row">
        <div class="offset-lg-3 col-lg-6 offset-md-2 col-md-8 offset-xs-1 col-xs-10 formBlock">
          <form [formGroup]="jobPostingForm" (ngSubmit)="onSubmit()">
            
            <!-- Job Title -->
            <div class="form-group">
              <label for="jobTitle">Job Title</label>
              <input type="text" id="jobTitle" class="form-control" formControlName="title">
              <span class="text-danger" *ngIf="jobPostingForm.controls['title'].invalid && jobPostingForm.controls['title'].dirty">
                Job title is required.
              </span>
            </div>

            <!-- Job Description -->
            <div class="form-group">
              <label for="jobDescription">Job Description</label>
              <textarea id="jobDescription" class="form-control" formControlName="description" rows="3"></textarea>
              <span class="text-danger" *ngIf="jobPostingForm.controls['description'].invalid && jobPostingForm.controls['description'].dirty">
                Job description is required.
              </span>
            </div>

            <!-- Requirements -->
            <div class="form-group">
              <label for="requirements">Requirements</label>
              <textarea id="requirements" class="form-control" formControlName="requirements" rows="3"></textarea>
            </div>

            <!-- Responsibilities -->
            <div class="form-group">
              <label for="responsibilities">Responsibilities</label>
              <textarea id="responsibilities" class="form-control" formControlName="responsibilities" rows="3"></textarea>
            </div>

            <!-- Department -->
            <div class="form-group">
              <label for="department">Department</label>
              <select id="department" class="form-control" formControlName="department">
                <option value="" disabled selected>Choose department</option>
                <option value="HR">HR</option>
                <option value="Engineering">Engineering</option>
                <option value="Sales">Sales</option>
                <option value="Marketing">Marketing</option>
              </select>
              <span class="text-danger" *ngIf="jobPostingForm.controls['department'].invalid && jobPostingForm.controls['department'].dirty">
                Please select a department.
              </span>
            </div>

            <!-- Job Location -->
            <div class="form-group">
              <label for="jobLocation">Job Location</label>
              <input type="text" id="jobLocation" class="form-control" formControlName="location">
              <span class="text-danger" *ngIf="jobPostingForm.controls['location'].invalid && jobPostingForm.controls['location'].dirty">
                Job location is required.
              </span>
            </div>

            <!-- Employment Type -->
            <div class="form-group">
              <label for="employmentType">Employment Type</label>
              <select id="employmentType" class="form-control" formControlName="employment_type">
                <option value="" disabled selected>Select type</option>
                <option value="FULL_TIME">Full-Time</option>
                <option value="PART_TIME">Part-Time</option>
                <option value="CONTRACT">Contract</option>
                <option value="INTERN">Internship</option>
              </select>
              <span class="text-danger" *ngIf="jobPostingForm.controls['employment_type'].invalid && jobPostingForm.controls['employment_type'].dirty">
                Please select employment type.
              </span>
            </div>

            <!-- Job Status -->
            <div class="form-group">
              <label for="jobStatus">Job Posting Status</label>
              <select id="jobStatus" class="form-control" formControlName="status">
                <option value="" disabled selected>Select status</option>
                <option value="ACTIVE">Active</option>
                <option value="INACTIVE">Inactive</option>
              </select>
              <span class="text-danger" *ngIf="jobPostingForm.controls['status'].invalid && jobPostingForm.controls['status'].dirty">
                Please select a status.
              </span>
            </div>

            <!-- Submit Button -->
            <div class="form-group">
              <button type="submit" class="btn btn-danger" [disabled]="jobPostingForm.invalid || jobPostingForm.pristine">Submit</button>
            </div>
          </form>

          <span *ngIf="errorMessage" class="text-danger">{{errorMessage}}</span>
          <span *ngIf="successMessage" class="text-success">{{successMessage}}</span>

        </div>
      </div>
    </div>
  </div>
</div>


import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { JobpostService } from './jobpost.service';
@Component({
  selector: 'app-recjobpost',
  templateUrl: './recjobpost.component.html',
  styleUrls: ['./recjobpost.component.css']
})
export class RecjobpostComponent implements OnInit {
  jobPostingForm!: FormGroup;
  errorMessage!: string;
  successMessage!: string;

  constructor(private formBuilder: FormBuilder, private jobPostService: JobpostService) {}

  ngOnInit(): void {
    this.jobPostingForm = this.formBuilder.group({
      title: ['', Validators.required],
      description: ['', Validators.required],
      requirements: [''],
      responsibilities: [''],
      department: ['', Validators.required],
      location: ['', Validators.required],
      employment_type: ['', Validators.required],
      status: ['', Validators.required]
    });
  }

  onSubmit(): void {
    this.successMessage = '';
    this.errorMessage = '';

    if (this.jobPostingForm.invalid) {
      this.errorMessage = 'Please fill in all required fields correctly.';
      return;
    }

    this.jobPostService.createJobPost(this.jobPostingForm.value).subscribe(
      () => {
        this.successMessage = 'Job posting created successfully!';
        this.jobPostingForm.reset();
      },
      () => {
        this.errorMessage = 'Something went wrong. Please try again later.';
      }
    );
  }
}

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable()
export class JobpostService {
  constructor(private http: HttpClient) {}

  createJobPost(jobpost: any): Observable<any> {
    return this.http.post("http://localhost:8080/job/jobpost", jobpost);
  }
}
































CREATE TABLE applications (
    application_id BIGINT AUTO_INCREMENT PRIMARY KEY,                      -- Unique identifier for each application
    candidate_id BIGINT NOT NULL,                                            -- Candidate applying for the job
    job_id BIGINT NOT NULL,                                                  -- The job the candidate applied for
    status ENUM('APPLIED', 'REVIEWED', 'INTERVIEW_SCHEDULED', 'INTERVIEWED', 'OFFERED', 'REJECTED', 'HIRED', 'WITHDRAWN') 
        NOT NULL DEFAULT 'APPLIED',                                         -- Status of the application
    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,                         -- Timestamp when the application was created
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,  -- Timestamp when the application was last updated
    
    -- Personal details:
    first_name VARCHAR(100),                                                 -- Candidate's first name
    last_name VARCHAR(100),                                                  -- Candidate's last name
    email VARCHAR(150) UNIQUE,                                               -- Candidate's email address (unique)
    date_of_birth DATE,                                                      -- Candidate's date of birth
    phone_number VARCHAR(20),                                                -- Candidate's phone number
    address VARCHAR(255),                                                    -- Candidate's home address
    
    -- Academic Details:
    college_name VARCHAR(255),                                               -- Candidate's college name
    tenth_percentage DECIMAL(5, 2),                                          -- Candidate's 10th grade percentage
    twelfth_percentage DECIMAL(5, 2),                                        -- Candidate's 12th grade percentage
    graduation_cgpa DECIMAL(4, 2),                                           -- Candidate's graduation CGPA
    post_graduation_cgpa DECIMAL(4, 2),                                     -- Candidate's post-graduation CGPA (optional)
    passed_out_year INT,                                                     -- Year the candidate passed out of college
    backlog_history TEXT,                                                    -- Candidate's backlog history (optional, can store text about number of backlogs)
    
    -- Skills & Projects:
    skills TEXT,                                                             -- List of skills the candidate has (e.g., programming languages, tools, etc.)
    projects TEXT,                                                           -- Description of the candidate's key projects
    course VARCHAR(255),                                                     -- The course the candidate studied (e.g., B.Tech, M.Tech)
    specialization VARCHAR(255),                                             -- Candidate's area of specialization (e.g., Computer Science, Mechanical Engineering)
    
    FOREIGN KEY (candidate_id) REFERENCES candidates(candidate_id),         -- Foreign key reference to the candidates table
    FOREIGN KEY (job_id) REFERENCES job_postings(job_id)                    -- Foreign key reference to the job_postings table
);
